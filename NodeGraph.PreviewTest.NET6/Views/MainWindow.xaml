<Window x:Class="NodeGraph.PreviewTest.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:NodeGraph.PreviewTest.NET6.ViewModels"
        xmlns:ctrl="clr-namespace:NodeGraph.NET6.Controls;assembly=NodeGraph.NET6"
        
        mc:Ignorable="d"
        Title="NodeGraph - prototype" Height="600" Width="1000">

    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>

    <Window.Resources>
        <ContextMenu x:Key="NodeGraphContextMenu">
            <MenuItem Header="AddNode" Command="{Binding AddNodeCommand}"/>
            <MenuItem Header="AddGroupNode" Command="{Binding AddGroupNodeCommand}"/>
            <MenuItem Header="RemoveNodes" Command="{Binding RemoveNodesCommand}"/>
        </ContextMenu>

        <Style x:Key="NodeInputStyle" TargetType="{x:Type ctrl:NodeInputContent}" BasedOn="{StaticResource {x:Type ctrl:NodeInputContent}}">
            <Setter Property="Guid" Value="{Binding Guid, Mode=OneWay}"/>
            <Setter Property="Content" Value="{Binding Label}"/>
            <Setter Property="IsEnabled" Value="{Binding IsEnable}"/>
            <Setter Property="AllowToConnectMultiple" Value="{Binding AllowToConnectMultiple}"/>
        </Style>

        <Style x:Key="NodeOutputStyle" TargetType="{x:Type ctrl:NodeOutputContent}" BasedOn="{StaticResource {x:Type ctrl:NodeOutputContent}}">
            <Setter Property="Guid" Value="{Binding Guid, Mode=OneWay}"/>
            <Setter Property="Content" Value="{Binding Label}"/>
            <Setter Property="IsEnabled" Value="{Binding IsEnable}"/>
        </Style>

        <Style x:Key="NodeLinkStyle" TargetType="{x:Type ctrl:NodeLink}" BasedOn="{StaticResource {x:Type ctrl:NodeLink}}">
            <Setter Property="Guid" Value="{Binding Guid, Mode=OneWay}"/>
            <Setter Property="OutputConnectorGuid" Value="{Binding OutputConnectorGuid, Mode=OneWay}"/>
            <Setter Property="InputConnectorGuid" Value="{Binding InputConnectorGuid, Mode=OneWay}"/>
            <Setter Property="IsLocked" Value="{Binding IsLocked, Mode=OneWay}"/>
            <Setter Property="IsSelected" Value="{Binding IsSelected}"/> <!--dont need to specify Mode=TwoWay because link is set default two way property.-->
        </Style>

        <Style x:Key="DefaultNodeStyle" TargetType="{x:Type ctrl:DefaultNode}" BasedOn="{StaticResource {x:Type ctrl:DefaultNode}}">
            <Setter Property="Guid" Value="{Binding Guid, Mode=OneWay}"/>
            <!--disconnect position binding if you specify Mode=OneWay, because it will change binding position instance in view control.-->
            <Setter Property="Position" Value="{Binding Position}"/>
            <Setter Property="IsSelected" Value="{Binding IsSelected}"/>
            <Setter Property="Inputs" Value="{Binding Inputs}"/>
            <Setter Property="InputLayout" Value="Center"/>
            <Setter Property="Outputs" Value="{Binding Outputs}"/>
            <Setter Property="OutputLayout" Value="Center"/>
            <Setter Property="InputMargin" Value="5,1,5,1"/>
            <Setter Property="OutputMargin" Value="4,0,4,10"/>
            <Setter Property="InputStyle" Value="{StaticResource NodeInputStyle}"/>
            <Setter Property="OutputStyle" Value="{StaticResource NodeOutputStyle}"/>
            <Setter Property="SizeChangedCommand" Value="{Binding SizeChangedCommand}"/>
            <Setter Property="HeaderContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel Background="#FF666666">
                            <StackPanel HorizontalAlignment="Center">
                                <Label Content="{Binding Name}"/>
                            </StackPanel>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel>
                            <TextBox Text="{Binding Body}"/>
                            <DockPanel TextBlock.Foreground="WhiteSmoke">
                                <TextBlock Margin="0,0,0,4" Text="{Binding Width, StringFormat=Width:{0:F2}}"/>
                                <TextBlock Margin="4,0,0,0" Text="{Binding Height, StringFormat=Height:{0:F2}}"/>
                            </DockPanel>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="GroupNodeStyle" TargetType="{x:Type ctrl:GroupNode}" BasedOn="{StaticResource {x:Type ctrl:GroupNode}}">
            <Setter Property="Guid" Value="{Binding Guid, Mode=OneWay}"/>
            <!--disconnect position binding if you specify Mode=OneWay, because it will change binding position instance in view control.-->
            <Setter Property="Position" Value="{Binding Position}"/>
            <Setter Property="InnerPosition" Value="{Binding InnerPosition}"/>
            <Setter Property="InterlockPosition" Value="{Binding InterlockPosition}"/>
            <Setter Property="InnerWidth" Value="{Binding InnerWidth}"/>
            <Setter Property="InnerHeight" Value="{Binding InnerHeight}"/>
            <Setter Property="Comment" Value="{Binding Comment}"/>
            <Setter Property="CommentSize" Value="24"/>
            <Setter Property="IsSelected" Value="{Binding IsSelected}"/>
            <Setter Property="SizeChangedCommand" Value="{Binding SizeChangedCommand}"/>
            <Setter Property="HeaderContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel Background="#FF666666">
                            <StackPanel HorizontalAlignment="Center">
                                <Label Content="{Binding Name}"/>
                            </StackPanel>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="64"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <StackPanel Grid.Row="0">
            <DockPanel LastChildFill="False">
                <Button Margin="4" Height="24" Content="AddTestNodeLink" Command="{Binding AddTestNodeLinkCommand}"/>
                <Button Margin="4" Height="24" Content="MoveTestNode" Command="{Binding MoveTestNodesCommand}"/>
                <Button Margin="4" Height="24" Content="ClearNodes" Command="{Binding ClearNodesCommand}"/>
                <Button Margin="4" Height="24" Content="ClearNodeLinks" Command="{Binding ClearNodeLinksCommand}"/>
                <Button Margin="4" Height="24" Content="MoveGroupNode" Command="{Binding MoveGroupNodeCommand}"/>
                <Button Margin="4" Height="24" Content="ChangeGroupInnerSize" Command="{Binding ChangeGroupInnerSizeCommand}"/>
                <Button Margin="4" Height="24" Content="ChangeGroupInnerPosition" Command="{Binding ChangeGroupInnerPositionCommand}"/>
                <Button Margin="4" Height="24" Content="ResetScale" Command="{Binding ResetScaleCommand}"/>
            </DockPanel>

            <DockPanel>
                <ComboBox Margin="4" Height="24" ItemsSource="{Binding GroupIntersectTypes, Mode=OneTime}" SelectedItem="{Binding SelectedGroupIntersectType}" ToolTip="group intersection type."/>
                <ComboBox Margin="4" Height="24" ItemsSource="{Binding RangeSelectionModes, Mode=OneTime}" SelectedItem="{Binding SelectedRangeSelectionMode}" ToolTip="range selection mode."/>
                <CheckBox Margin="4" Height="24" Content="IsLockedAllNodeLinks" IsChecked="{Binding IsLockedAllNodeLinks}" VerticalContentAlignment="Center"/>
                <CheckBox Margin="4" Height="24" Content="IsEnableAllNodeConnectors" IsChecked="{Binding IsEnableAllNodeConnectors}" VerticalContentAlignment="Center"/>
                <CheckBox Margin="4" Height="24" Content="AllowToOverrideConnection" IsChecked="{Binding AllowToOverrideConnection}" VerticalContentAlignment="Center" ToolTip="You can't connect multiple links if true."/>
                <CheckBox Margin="4" Height="24" Content="ClipToBounds" IsChecked="{Binding ClipToBounds}" VerticalContentAlignment="Center"/>
            </DockPanel>
        </StackPanel>
        <ctrl:NodeGraph Grid.Row="3"
                        x:Name="NodeGraph"
                        MoveWithMouse="Right"
                        Scale="{Binding Scale}"
                        ItemsSource="{Binding NodeViewModels}"
                        ItemContainerStyle="{StaticResource DefaultNodeStyle}"
                        NodeLinks="{Binding NodeLinkViewModels}"
                        NodeLinkStyle="{StaticResource NodeLinkStyle}"                        
                        GroupNodes="{Binding GroupNodeViewModels}"
                        GroupNodeStyle="{StaticResource GroupNodeStyle}"
                        PreviewConnectLinkCommand="{Binding PreviewConnectLinkCommand}"
                        ConnectedLinkCommand="{Binding ConnectedLinkCommand}"
                        DisconnectedLinkCommand="{Binding DisconnectedLinkCommand}"
                        AllowToOverrideConnection="{Binding AllowToOverrideConnection}"
                        ClipToBounds="{Binding ClipToBounds}"
                        ContextMenu="{StaticResource NodeGraphContextMenu}">

            <ctrl:NodeGraph.Style>
                <Style TargetType="{x:Type ctrl:NodeGraph}" BasedOn="{StaticResource {x:Type ctrl:NodeGraph}}">
                    <Style.Triggers>
                        <!--Group intersect -->
                        <DataTrigger Binding="{Binding SelectedGroupIntersectType}" Value="{x:Static vm:GroupIntersectType.CursorPointVMDefine}">
                            <Setter Property="GroupIntersectType" Value="{x:Static ctrl:GroupIntersectType.CursorPoint}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SelectedGroupIntersectType}" Value="{x:Static vm:GroupIntersectType.BoundingBoxVMDefine}">
                            <Setter Property="GroupIntersectType" Value="{x:Static ctrl:GroupIntersectType.BoundingBox}"/>
                        </DataTrigger>

                        <!--Range selection mode-->
                        <DataTrigger Binding="{Binding SelectedRangeSelectionMode}" Value="{x:Static vm:RangeSelectionMode.ContainVMDefine}">
                            <Setter Property="RangeSelectionMdoe" Value="{x:Static ctrl:RangeSelectionMode.Contain}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding SelectedRangeSelectionMode}" Value="{x:Static vm:RangeSelectionMode.IntersectVMDefine}">
                            <Setter Property="RangeSelectionMdoe" Value="{x:Static ctrl:RangeSelectionMode.Intersect}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ctrl:NodeGraph.Style>
            
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectionChanged">
                    <i:InvokeCommandAction Command="{Binding SelectionChangedCommand}" CommandParameter="{Binding SelectedItems, ElementName=NodeGraph}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </ctrl:NodeGraph>
    </Grid>
</Window>
